{"version":3,"sources":["../../src/jwt/index.ts","../../src/hooks/index.tsx","App.tsx","index.tsx"],"names":["decodeToken","token","payload","padding","repeat","base64","JSON","atob","error","useJwt","userJwt","useState","isExpired","setIsExpired","decodedToken","setDecodedToken","useEffect","evaluateToken","result","expirationDate","Date","isTokenExpired","reEvaluateToken","App","setToken","className","style","display","value","onChange","e","target","stringify","disabled","ReactDOM","render","document","getElementById"],"mappings":"iNAKgBA,EAAYC,GAC1B,IAGE,GAAIA,yBAAJ,kBAA4CA,EAC1C,YAKF,IAAMC,EAAkBD,aAAxB,GAEME,EAAkB,IAAIC,QAAQ,EAAKF,SAAN,GAAnC,GAEMG,EACJH,oCADF,EAKA,OAFgBI,WAAWC,KAA3B,IAGA,MAAOC,GAEP,a,SCnBYC,EAAOC,G,MACaC,oBAAQ,GAAnCC,OAAWC,O,EACsBF,mBAAQ,MAAzCG,OAAcC,OAErBC,qBAAU,WACRC,OACC,CAFHD,IAIA,IAAMC,EAAgB,SAAChB,GACrBc,EAAgBf,EAAhBe,IACAF,E,SDkB2BZ,GAC7B,IAAMa,EAAoBd,EAA1B,GACIkB,GAAJ,EAEA,GAAIJ,GAAgBA,EAApB,IAAsC,CACpC,IAAMK,EAAuB,IAAIC,KAAjC,GACAD,gBAA6BL,EAA7BK,KAEAD,EAASC,aAA2B,IAAIC,MAAxCF,UAGF,SC7BeG,CAAbR,KAGF,MAAO,CAAED,UAAF,EAAaE,aAAb,EAA2BQ,gBAAiBL,GCjBrD,IA4CeM,EA5CH,WAAO,IAAD,EACUZ,mBACxB,2JAFc,mBACTV,EADS,KACFuB,EADE,OAIoBf,EAAOR,GAAnCa,EAJQ,EAIRA,aAAcF,EAJN,EAIMA,UAEtB,OACE,yBAAKa,UAAU,WACb,6BACE,0BAAMC,MAAO,CAAEC,QAAS,SACtB,uBAAGF,UAAU,kBAAb,WACA,uBAAGA,UAAU,qBAAb,qBAGF,8BACEA,UAAU,iBACVG,MAAO3B,EACP4B,SAAU,SAACC,GAAD,OAAON,EAASM,EAAEC,OAAOH,WAGvC,6BACE,0BAAMF,MAAO,CAAEC,QAAS,SACtB,uBAAGF,UAAU,kBAAb,WACCb,EACC,uBAAGa,UAAU,4CAAb,yBAIA,uBAAGA,UAAU,gDAAb,8BAMJ,8BACEA,UAAU,kBACVG,MAAOtB,KAAK0B,UAAUlB,GACtBmB,UAAQ,OCnClBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.a05c0a0b.chunk.js","sourcesContent":["/**\n * Try to decode a JWT. If the token is valid you'll get an object otherwise you'll get null\n * @param token - The JWT that you want to decode\n * @returns Decoded token\n */\nexport function decodeToken(token: string): Object | null {\n  try {\n    // if the token has more or less than 3 parts or is not a string\n    // then is not a valid token\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    }\n\n    // payload ( index 1 ) has the data stored and\n    // data about the expiration time\n    const payload: string = token.split(\".\")[1];\n    // determine the padding characters required for the base64 string\n    const padding: string = \"=\".repeat((4 - (payload.length % 4)) % 4);\n    // convert the base64url string to a base64 string\n    const base64: string =\n      payload.replace(\"-\", \"+\").replace(\"_\", \"/\") + padding;\n    // decode and parse to json\n    const decoded = JSON.parse(atob(base64));\n\n    return decoded;\n  } catch (error) {\n    // Return null if something goes wrong\n    return null;\n  }\n}\n\n/**\n * Verify if the token is expired or not\n * @param token - Your JWT\n * @returns boolean\n */\nexport function isTokenExpired(token: string): boolean {\n  const decodedToken: any = decodeToken(token);\n  let result: boolean = true;\n\n  if (decodedToken && decodedToken.exp) {\n    const expirationDate: Date = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp); // sets the expiration seconds\n    // compare the expiration time and the current time\n    result = expirationDate.valueOf() < new Date().valueOf();\n  }\n\n  return result;\n}\n","import { useState, useEffect } from \"react\";\nimport { decodeToken, isTokenExpired } from \"../jwt\";\n\n/**\n * This function will help you to decode a JWT and know if it's expired or not\n * @param userJwt - Your JWT\n * @returns An object containing the properties isExpired, decodedToken and reEvaluateToken\n */\nexport function useJwt(userJwt: string): IUseJwt {\n  const [isExpired, setIsExpired] = useState<boolean>(false);\n  const [decodedToken, setDecodedToken] = useState<any>(null);\n\n  useEffect(() => {\n    evaluateToken(userJwt);\n  }, [userJwt]);\n\n  const evaluateToken = (token: string) => {\n    setDecodedToken(decodeToken(token));\n    setIsExpired(isTokenExpired(token));\n  };\n\n  return { isExpired, decodedToken, reEvaluateToken: evaluateToken };\n}\n\ninterface IUseJwt {\n  isExpired: boolean;\n  decodedToken: Object;\n  reEvaluateToken: (token: string) => void;\n}\n","import React, { useState } from \"react\";\nimport { useJwt } from \"react-jwt\";\nimport \"./index.css\";\n\nconst App = () => {\n  const [token, setToken] = useState(\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiR3VzdGF2byIsImlhdCI6MTU5NjQwODI1OSwiZXhwIjo0NzUyMTY4MjU5fQ.ThwsJW2KfMTl0y24tTGWKHqvYWRp1iyo_Kh2KWTHuXc\"\n  );\n  const { decodedToken, isExpired } = useJwt(token);\n\n  return (\n    <div className=\"example\">\n      <div>\n        <span style={{ display: \"flex\" }}>\n          <p className=\"example__title\">Encoded</p>\n          <p className=\"example__subtitle\">Paste a JWT here</p>\n        </span>\n        {/* Paste a JWT here and will be decoded */}\n        <textarea\n          className=\"example__token\"\n          value={token}\n          onChange={(e) => setToken(e.target.value)}\n        />\n      </div>\n      <div>\n        <span style={{ display: \"flex\" }}>\n          <p className=\"example__title\">Decoded</p>\n          {isExpired ? (\n            <p className=\"example__subtitle example--token-expired\">\n              Your token is expired\n            </p>\n          ) : (\n            <p className=\"example__subtitle example--token-not-expired\">\n              Your token is not expired\n            </p>\n          )}\n        </span>\n        {/* Here is your decoded token */}\n        <textarea\n          className=\"example__result\"\n          value={JSON.stringify(decodedToken)}\n          disabled\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}