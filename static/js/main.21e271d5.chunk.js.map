{"version":3,"sources":["../../src/jwt/index.ts","../../src/hooks/index.tsx","App.tsx","index.tsx"],"names":["decodeToken","token","base64","payload","JSON","atob","error","useJwt","useState","isExpired","setIsExpired","decodedToken","setDecodedToken","useEffect","result","expirationDate","Date","isTokenExpired","App","setToken","className","style","display","value","onChange","e","target","stringify","ReactDOM","render","document","getElementById"],"mappings":"iNAAgBA,EAAYC,GAC1B,IAGE,GAAIA,yBAAJ,kBAA4CA,EAC1C,YAIA,IAEMC,EAFkBD,aAAxB,GAEuBE,6BAAvB,KAGA,OADgBC,WAAWC,KAA3B,IAGF,MAAOC,GAEP,a,SCfYC,EAAON,G,MACaO,oBAAS,GAApCC,OAAWC,O,EACsBF,mBAAQ,MAAzCG,OAAcC,OAOrB,OALAC,qBAAU,WACRD,EAAgBZ,EAAhBY,IACAF,E,SDa2BT,GAC7B,IAAMU,EAAoBX,EAA1B,GACIc,GAAJ,EAEA,GAAIH,GAAgBA,EAApB,IAAsC,CACpC,IAAMI,EAAuB,IAAIC,KAAjC,GACAD,gBAA6BJ,EAA7BI,KAEAD,EAASC,aAA2B,IAAIC,MAAxCF,eAEAA,KAGF,SC1BeG,CAAbP,MACC,CAHHG,IAKO,CAAEJ,UAAF,EAAaE,gBCRtB,IA2CeO,EA3CH,WAAO,IAAD,EACUV,mBACxB,2JAFc,mBACTP,EADS,KACFkB,EADE,OAIoBZ,EAAON,GAAnCU,EAJQ,EAIRA,aAAcF,EAJN,EAIMA,UAEtB,OACE,yBAAKW,UAAU,WACb,6BACE,0BAAMC,MAAO,CAAEC,QAAS,SACtB,uBAAGF,UAAU,kBAAb,WACA,uBAAGA,UAAU,qBAAb,qBAGF,8BACEA,UAAU,iBACVG,MAAOtB,EACPuB,SAAU,SAACC,GAAD,OAAON,EAASM,EAAEC,OAAOH,WAGvC,6BACE,0BAAMF,MAAO,CAAEC,QAAS,SACtB,uBAAGF,UAAU,kBAAb,WACCX,EACC,uBAAGW,UAAU,4CAAb,yBAIA,uBAAGA,UAAU,gDAAb,8BAMJ,8BACEA,UAAU,kBACVG,MAAOnB,KAAKuB,UAAUhB,QClChCiB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.21e271d5.chunk.js","sourcesContent":["export function decodeToken(token: string) {\n  try {\n    // if the token has more or less than 3 parts or is not a string\n    // then is not a valid token\n    if (token.split(\".\").length !== 3 || typeof token !== \"string\") {\n      return null;\n    } else {\n      // payload ( index 1 ) has the data stored and\n      // data about the expiration time\n      const payload: string = token.split(\".\")[1];\n      // handle unicode parsing issues between atob and JWT base64 format\n      const base64: string = payload.replace(\"-\", \"+\").replace(\"_\", \"/\");\n      // decode and parse to json\n      const decoded = JSON.parse(atob(base64));\n      return decoded;\n    }\n  } catch (error) {\n    // Return null if something goes wrong\n    return null;\n  }\n}\n\nexport function isTokenExpired(token: string) {\n  const decodedToken: any = decodeToken(token);\n  let result: boolean = true;\n\n  if (decodedToken && decodedToken.exp) {\n    const expirationDate: Date = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp); // sets the expiration seconds\n    // compare the expiration time and the current time\n    result = expirationDate.valueOf() < new Date().valueOf();\n  } else {\n    result = true;\n  }\n\n  return result;\n}\n","import { useState, useEffect } from \"react\";\nimport { decodeToken, isTokenExpired } from \"../jwt\";\n\nexport function useJwt(token: string) {\n  const [isExpired, setIsExpired] = useState(false);\n  const [decodedToken, setDecodedToken] = useState<any>(null);\n\n  useEffect(() => {\n    setDecodedToken(decodeToken(token));\n    setIsExpired(isTokenExpired(token));\n  }, [token]);\n\n  return { isExpired, decodedToken };\n}\n","import React, { useState } from \"react\";\nimport { useJwt } from \"react-jwt\";\nimport \"./index.css\";\n\nconst App = () => {\n  const [token, setToken] = useState(\n    \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiR3VzdGF2byIsImlhdCI6MTU5NjQwODI1OSwiZXhwIjo0NzUyMTY4MjU5fQ.ThwsJW2KfMTl0y24tTGWKHqvYWRp1iyo_Kh2KWTHuXc\"\n  );\n  const { decodedToken, isExpired } = useJwt(token);\n\n  return (\n    <div className=\"example\">\n      <div>\n        <span style={{ display: \"flex\" }}>\n          <p className=\"example__title\">Encoded</p>\n          <p className=\"example__subtitle\">Paste a JWT here</p>\n        </span>\n        {/* Paste a JWT here and will be decoded */}\n        <textarea\n          className=\"example__token\"\n          value={token}\n          onChange={(e) => setToken(e.target.value)}\n        />\n      </div>\n      <div>\n        <span style={{ display: \"flex\" }}>\n          <p className=\"example__title\">Decoded</p>\n          {isExpired ? (\n            <p className=\"example__subtitle example--token-expired\">\n              Your token is expired\n            </p>\n          ) : (\n            <p className=\"example__subtitle example--token-not-expired\">\n              Your token is not expired\n            </p>\n          )}\n        </span>\n        {/* Here is your decoded token */}\n        <textarea\n          className=\"example__result\"\n          value={JSON.stringify(decodedToken)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}